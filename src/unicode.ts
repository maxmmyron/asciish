 enum UnicodeType {
  ARROW = "arrow",
  MATH = "math",
  MISC = "misc",
  MUSIC = "music",
  GEOMETRY = "geometry",
  SHAPE = "shape",
  SQUARE = "square",
  CIRCLE = "circle",
  LOGIC = "logic",
}

const registerUnicode = (char: string, shortcodes: string[], ...types: UnicodeType[]) => {
  for (const shortcode of shortcodes) {
    const regexp = new RegExp(`&${shortcode};`, "g");
    if (unicode.has(regexp)) throw new Error(`Error registering ${shortcode} to ${char}: shortcode already registered to ${unicode.get(regexp)}`);
    unicode.set(regexp, [char, ...types]);
  }
};

const unicode: Map<RegExp, [string, ...UnicodeType[]]> = new Map();

// ----------------------------------------
// ARROWS
// ----------------------------------------

// basic directional arrows
registerUnicode("‚Üê", ["larr"], UnicodeType.ARROW);
registerUnicode("‚Üë", ["uarr"], UnicodeType.ARROW);
registerUnicode("‚Üí", ["rarr"], UnicodeType.ARROW);
registerUnicode("‚Üì", ["darr"], UnicodeType.ARROW);
registerUnicode("‚Üî", ["harr"], UnicodeType.ARROW);
registerUnicode("‚Üï", ["varr"], UnicodeType.ARROW);
registerUnicode("‚Üñ", ["nwarr"], UnicodeType.ARROW);
registerUnicode("‚Üó", ["nearr"], UnicodeType.ARROW);
registerUnicode("‚Üò", ["searr"], UnicodeType.ARROW);
registerUnicode("‚Üô", ["swarr"], UnicodeType.ARROW);

// double directional arrows
registerUnicode("‚áê", ["lArr"], UnicodeType.ARROW);
registerUnicode("‚áë", ["uArr"], UnicodeType.ARROW);
registerUnicode("‚áí", ["rArr"], UnicodeType.ARROW);
registerUnicode("‚áì", ["dArr"], UnicodeType.ARROW);
registerUnicode("‚áî", ["hArr"], UnicodeType.ARROW);
registerUnicode("‚áï", ["vArr"], UnicodeType.ARROW);
registerUnicode("‚áñ", ["nwArr"], UnicodeType.ARROW);
registerUnicode("‚áó", ["neArr"], UnicodeType.ARROW);
registerUnicode("‚áò", ["seArr"], UnicodeType.ARROW);
registerUnicode("‚áô", ["swArr"], UnicodeType.ARROW);

// ----------------------------------------
// MATH SYMBOLS
// ----------------------------------------

// basic equation symbols
registerUnicode("‚àè", ["prod", "product"], UnicodeType.MATH);
registerUnicode("‚àë", ["sum"], UnicodeType.MATH);
registerUnicode("‚àö", ["sqrt", "root"], UnicodeType.MATH);
registerUnicode("‚àï", ["frac", "fraction"], UnicodeType.MATH);
registerUnicode("‚àÇ", ["partial"], UnicodeType.MATH);
registerUnicode("‚à´", ["int", "integral"], UnicodeType.MATH);
registerUnicode("‚à¨", ["iint", "doubleintegral"], UnicodeType.MATH);
registerUnicode("‚à≠", ["iiint", "tripleintegral"], UnicodeType.MATH);
registerUnicode("‚àÆ", ["oint", "contourintegral"], UnicodeType.MATH);
registerUnicode("‚àØ", ["oiint", "doublecontourintegral"], UnicodeType.MATH);
registerUnicode("‚à∞", ["oiiint", "triplecontourintegral"], UnicodeType.MATH);
registerUnicode("‚âà", ["approx", "approxeq"], UnicodeType.MATH);
registerUnicode("‚ââ", ["napprox", "napproxeq"], UnicodeType.MATH);
registerUnicode("‚â†", ["neq", "noteq"], UnicodeType.MATH);
registerUnicode("‚â°", ["equiv", ], UnicodeType.MATH);

// misc math symbols
registerUnicode("‚à†", ["angle"], UnicodeType.MATH);

// Values
registerUnicode("‚àû", ["infinity"], UnicodeType.MATH);
registerUnicode("œÄ", ["pi"], UnicodeType.MATH);

// ----------------------------------------
// MATHEMATIC LOGIC SYMBOLS
// ----------------------------------------

registerUnicode("‚àÄ", ["forall"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚àÉ", ["exists"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚àÑ", ["nexists", "!exists"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚àà", ["in"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚àâ", ["notin", "!in"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚à©", ["cap", "intersection"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚à™", ["cup", "union"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚àß", ["and"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚à®", ["or"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚äª", ["xor"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚äº", ["nand"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚äΩ", ["nor"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚äï", ["oplus"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚äñ", ["ominus"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚äó", ["otimes"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚äò", ["odiv"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚äÇ", ["subset"], UnicodeType.MATH, UnicodeType.LOGIC);
registerUnicode("‚äÉ", ["superset"], UnicodeType.MATH, UnicodeType.LOGIC);

// ----------------------------------------
// MUSICAL SYMBOLS
// ----------------------------------------

registerUnicode("ùÑû", ["trebleclef", "treble"], UnicodeType.MUSIC);
registerUnicode("ùÑ¢", ["bassclef", "bass"], UnicodeType.MUSIC);

// ----------------------------------------
// GEOMETRY SYMBOLS
// ----------------------------------------

registerUnicode("‚ñ≥", ["triangle"], UnicodeType.GEOMETRY);

registerUnicode("‚ñ†", ["blacksquare"], UnicodeType.GEOMETRY);
registerUnicode("‚ñ°", ["whitesquare"], UnicodeType.GEOMETRY);
registerUnicode("‚ñ™", ["blacksqsm"], UnicodeType.GEOMETRY);
registerUnicode("‚ñ´", ["whitesqsm"], UnicodeType.GEOMETRY);
registerUnicode("‚ñ¢", ["roundedsquare"], UnicodeType.GEOMETRY);

registerUnicode("‚óè", ["blackcircle"], UnicodeType.GEOMETRY);
registerUnicode("‚óã", ["whitecircle"], UnicodeType.GEOMETRY);

registerUnicode("‚óá", ["diamond"], UnicodeType.GEOMETRY);

registerUnicode("‚¨ü", ["blackpentagon"], UnicodeType.GEOMETRY);
registerUnicode("‚¨†", ["whitepentagon"], UnicodeType.GEOMETRY);

registerUnicode("‚¨¢", ["blackhex"], UnicodeType.GEOMETRY);
registerUnicode("‚¨°", ["whitehex"], UnicodeType.GEOMETRY);
registerUnicode("‚¨£", ["blackhexhorz", "horizontalblackhex"], UnicodeType.GEOMETRY);

// ----------------------------------------
// MISC SYMBOLS
// ----------------------------------------

registerUnicode("Ô£ø", ["applelogo"], UnicodeType.MISC);
registerUnicode("Ô£ø", ["twitterlogo"], UnicodeType.MISC);

export { unicode, UnicodeType };
